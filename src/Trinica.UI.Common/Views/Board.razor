@using Trinica.UseCases.Gameplay

@inherits BaseElement

<div id="board-container">
    @*<Card class_topmost="card-view" Id="nigin" />*@
    <div id="board">
        <section class="cards">
            @{ var enemy = Game.Enemies[0]; }
            <div class="col hand-deck">
                @GetTransparentCard()
                @GetCardRow(enemy.HandDeck.Cards, Card.CardDeckType.HandDeck, reversed: true)
            </div>
            <div class="col battling-deck">
                @GetCardByDTO(enemy.Hero, enemy.PlayerId, Card.CardDeckType.Hero)
                @GetCardRow(enemy.BattlingDeck.Cards, Card.CardDeckType.BattlingDeck)
            </div>
        </section>

        @if (Game.CenterCard is not null)
        {
            @GetCard("", "", "Center", Card.CardDeckType.Center)
        }
        else
        {
            @GetTransparentCard()
        }

        <section class="cards">
            <section class="cards">
                <div class="col battling-deck">
                    @GetCardByDTO(Game.Player.Hero, Game.Player.PlayerId, Card.CardDeckType.Hero)
                    @GetCardRow(Game.Player.BattlingDeck.Cards, Card.CardDeckType.BattlingDeck)
                </div>
                <div class="col hand-deck">
                    @GetTransparentCard()
                    @GetCardRow(Game.Player.HandDeck.Cards, Card.CardDeckType.HandDeck)
                </div>
            </section>
        </section>
    </div>

    <aside>
        @if (enemy.HasIdleCards)
        {
            @GetCard("", enemy.PlayerId, "Enemy Deck", Card.CardDeckType.EnemyDeck, reversed: true, reverseName: "Enemy Deck")
        }
        @if (Game.HasCommonCards)
        {
            @GetCard("", "", "Common Deck", Card.CardDeckType.CommonDeck, reversed: true, reverseName: "Common Deck")
        }
        @if (Game.Player.HasIdleCards)
        {
            @GetCard("", Game.Player.PlayerId, "Own Deck", Card.CardDeckType.OwnDeck, reversed: true, reverseName: "Own Deck")
        }
    </aside>

    <div class="action-bar">
        <div class="action-bar">
            @foreach (var button in _actionButtons)
            {
                <button class="action-button" @onclick=@(() => OnActionButtonClick?.Invoke(button.Id))>@button.Name</button>
            }
        </div>
        <h5 class="action-hint">@_actionHint</h5>
    </div>
</div>

@{
    RenderFragment GetTransparentCard()
    {
        return builder =>
        {
            <Card IsTransparent=true />
        };
    }

    RenderFragment GetCardByDTO(
        CardDTO cardDto,
        string playerId, 
        Card.CardDeckType deckType,
        bool reversed = false)
    {
        return builder =>
        {
            <Card @ref=_cards[cardDto.Id]
              DTO=@cardDto
              PlayerId=@playerId
              DeckType=@deckType
              IsReversed=reversed
              OnCardClick=@OnCardClickInternal />
        };
    }

    RenderFragment GetCard(
        string cardId,
        string playerId,
        string name,
        Card.CardDeckType deckType,
        bool reversed = false,
        string? reverseName = null)
    {
        return builder =>
        {
            <Card @ref=_cards[cardId]
              DTO=@(new CardDTO(!cardId.IsNullOrEmpty() ? cardId : Guid.NewGuid().ToString(), reversed, name))
              PlayerId=@playerId
              DeckType=@deckType
              IsReversed=@reversed
              ReverseName=@reverseName
              OnCardClick=@OnCardClickInternal />
        };
    }

    RenderFragment GetCardRow(
        CardDTO[] cards,
        Card.CardDeckType deckType,
        bool reversed = false)
    {
        return builder =>
        {
            @for (int i = 0; i < cards.Length; i++)
            {
                @GetCardByDTO(cards[i], Game.Player.PlayerId, deckType, reversed)
            }
            @for (int i = 0; i < 6 - cards.Length; i++)
            {
                @GetTransparentCard()
            }
        };
    }
}
