@using Corelibs.Basic.Functional;
@using Corelibs.Blazor.UIComponents.JS;
@using Microsoft.JSInterop;
@using Trinica.UseCases.Gameplay;

@inherits BaseElement

@*Css:
    height: 825px;
    width: 550px;
*@

@if (DTO is null) { return; }
@if (IsReversed)
{
    <div class="card @_grayedOutCssClass @_transparentCssClass @class_topmost @DTO.Id" style=@_fontSizeStyle @onclick=@OnCardClickInternal>
        <span class="reverse-name" style=@_fontSizeStyle>@ReverseName</span>
    </div>
    return;
}
else
{
    <div class="card card-avers @_grayedOutCssClass @_transparentCssClass @class_topmost @DTO.Id" style=@_fontSizeStyle
    @onclick=@OnCardClickInternal>
        <h2 class="name" style=@_fontSizeStyle>@DTO.Name</h2>
        <h2 class="type" style=@_fontSizeStyle>@DTO.Type</h2>
        @if (!Targets.IsNullOrEmptyOrNotOne())
        {
            <div class="target-panel">
                @if (!Targets.All(t => t.IsNullOrEmpty()))
                {
                    <label class="target-label">TRG:</label>
                }
                @foreach (var target in Targets)
                {
                    if (target.IsNullOrEmpty())
                        continue;

                    <span class="target-value">@target</span>
                }
            </div>
        }
        <section class="info-panel">
            <h6 class="info-panel-text race-text" style=@_fontSizeStyle>@DTO.Race</h6>
            <h6 class="info-panel-text class-text" style=@_fontSizeStyle>@DTO.Class</h6>
            <h6 class="info-panel-text fraction-text" style=@_fontSizeStyle>@DTO.Fraction</h6>
        </section>
        <section class="stats-panel">
            @if (DTO.Statistics is not null)
            {
                <div class="stat-panel hp-stat-row">
                    <div class="stat-values-row">
                        <span class="stat-text" style=@_fontSizeStyle>@DTO.Statistics.HP.Current</span>
                        <span class="stat-text" style=@_fontSizeStyle>/</span>
                        <span class="stat-text" style=@_fontSizeStyle>@DTO.Statistics.HP.Original</span>
                    </div>
                    <span class="stat-name" style=@_fontSizeStyle>HP</span>
                </div>
            }
            @if (DTO.Statistics is not null)
            {
                <div class="stat-panel">
                    <div class="stat-values-row">
                        <span class="stat-text" style=@_fontSizeStyle>@DTO.Statistics.Attack.Current</span>
                    </div>
                    <span class="stat-name" style=@_fontSizeStyle>AT</span>
                </div>
            }
            @if (DTO.Statistics is not null)
            {
                <div class="stat-panel">
                    <div class="stat-values-row">
                        <span class="stat-text" style=@_fontSizeStyle>@DTO.Statistics.Speed.Current</span>
                    </div>
                    <span class="stat-name" style=@_fontSizeStyle>SP</span>
                </div>
            }
            @if (DTO.Statistics is not null)
            {
                <div class="stat-panel">
                    <div class="stat-values-row">
                        <span class="stat-text" style=@_fontSizeStyle>@DTO.Statistics.Power.Current</span>
                    </div>
                    <span class="stat-name" style=@_fontSizeStyle>PW</span>
                </div>
            }
        </section>@*
    <section class="row">
    <ul class="card-list effects">
    <li class="el">
    <img src="icon.svg" alt="effect icon" class="card-icon" />
    </li>
    <li class="el">
    <img src="icon.svg" alt="effect icon" class="card-icon" />
    </li>
    <li class="el">
    <img src="icon.svg" alt="effect icon" class="card-icon" />
    </li>
    </ul>
    <ul class="card-list">
    <li class="el number">200</li>
    <li class="el number">20</li>
    <li class="el number">0</li>
    <li class="el number">2</li>
    </ul>
    </section>
    <section class="row">
    <p class="card-description">
    Lorem, ipsum dolor sit amet consectetur adipisicing elit.
    </p>
    </section>*@
    </div>
}



@code {
    public delegate Task OnCardClickDelegate(CardDTO dto, string playerId, Card.CardDeckType deckType);

    [Parameter] public string? class_topmost { get; set; }

    [Parameter] public CardDTO? DTO { get; set; } = new("", false, "");

    [Parameter] public string[]? Targets { get; set; }
    [Parameter] public string? PlayerId { get; set; }
    [Parameter] public string? ReverseName { get; set; }

    [Parameter] public CardDeckType? DeckType { get; set; }
    [Parameter] public bool IsTransparent { get; set; } = false;
    [Parameter] public bool IsReversed { get; set; } = false;
    [Parameter] public bool IsGrayedOut { get; set; } = false;
    [Parameter] public bool IsWholeCardClickOnly { get; set; } = true;

    [Parameter] public OnCardClickDelegate? OnCardClick { get; set; }

    [Inject] public IJSRuntime JSRuntime { get; set; }

    private string? _transparentCssClass => IsTransparent ? "card-hidden" : "";
    private string? _grayedOutCssClass => IsGrayedOut ? "card-grayed-out" : "";

    private double _baseFontSize = 10;
    private string _fontSizeStyle = $"font-size: 10px;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (!DTO.Name.IsNullOrEmpty())
            Console.WriteLine(DTO.Name);

        if (DTO.Id.IsNullOrEmpty())
            return;

        var rect = await JSRuntime.GetRect(DTO.Id);
        _baseFontSize = rect.Height * 0.03;
        _baseFontSize = rect.Height * 0.07;
        _fontSizeStyle = $"font-size: {_baseFontSize}px;";

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCardClickInternal()
    {
        if (IsWholeCardClickOnly && OnCardClick is not null)
            await OnCardClick?.Invoke(DTO, PlayerId, DeckType);
    }

    public record CardDeckType(string Value)
    {
        public static readonly CardDeckType BattlingDeck = new("Battling");
        public static readonly CardDeckType HandDeck = new("Hand");
        public static readonly CardDeckType Hero = new("Hero");
        public static readonly CardDeckType OwnDeck = new("Own Deck");
        public static readonly CardDeckType EnemyDeck = new("Enemy Deck");
        public static readonly CardDeckType CommonDeck = new("Common Deck");
        public static readonly CardDeckType Center = new("Center");
    }

    public record Stat(int Current, int? Original = null);

    public Task Render() => InvokeAsync(StateHasChanged);

    public Task SetGreyOut(bool value = true)
    {
        IsGrayedOut = value;
        return InvokeAsync(StateHasChanged);
    }
}
