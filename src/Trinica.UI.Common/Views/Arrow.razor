@using Corelibs.Blazor.UIComponents.JS;
@using Microsoft.JSInterop;

@inject IJSRuntime JSRuntime

@if (_startRect is null || _endRect is null) { return; }

    <div 
        class="arrow" 
        style=@($@"
            position: absolute; 
            top: {_startRect.Top}px; 
            left: {_startRect.Left}px; 
            width: {_arrowLength}px;
            transform: translate(-100%, -1000%) rotate({_arrowRotationDeg}deg) ;")></div>

@code {
    [Parameter] public ArrowDTO DTO { get; set; }

    private BoundRect _startRect;
    private BoundRect _endRect;
    private double _arrowLength;
    private double _arrowRotationDeg;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await UpdateArrow();
    }

    private async Task UpdateArrow()
    {
        _startRect = await JSRuntime.GetRect(DTO.StartElementCssClass);
        _endRect = await JSRuntime.GetRect(DTO.EndElementCssClass);

        double dx = _endRect.X - _startRect.X;
        double dy = _endRect.Y - _startRect.Y;

        _arrowLength = Math.Sqrt(dx * dx + dy * dy);
        _arrowRotationDeg = Math.Atan2(dy, dx) * (180.0 / Math.PI);
    }

    public record ArrowDTO(string StartElementCssClass, string EndElementCssClass);
}
