@page "/game"
@using Microsoft.AspNetCore.Components.Authorization;
@using Trinica.UseCases.Gameplay;
@using Trinica.UseCases.Users;

@*<FullBg ImageUrl=@($@"{Config.BaseAssetsPath}/images/general/main-bg.png") />*@

@if (_game is null)
{
    <p>No Game</p>
    return;
}

<div id="board-container">
    <div id="board">
        <section class="cards">
            @{ var enemy = _game.Enemies[0]; }
            <div class="col hand-deck">
                <button class="card card-revers hero-card">Hero@*enemy.HeroCard*@</button>
                @for (int i = 0; i < enemy.HandDeck.Cards.Length; i++)
                {
                    @*enemy.HandDeck.Cards[i];*@
                    <button class="card card-revers">card</button>
                }
                @for (int i = 0; i < 6 - enemy.HandDeck.Cards.Length; i++)
                {
                    <button class="card card-revers card-hidden">card</button>
                }
            </div>
            <div class="col battling-deck">
                <button class="card card-avers card-hidden">card</button>
                @for (int i = 0; i < enemy.BattlingDeck.Cards.Length; i++)
                {
                    @*enemy.BattlingDeck.Cards[i];*@
                    <button class="card card-avers">card</button>
                }
                @for (int i = 0; i < 6 - enemy.BattlingDeck.Cards.Length; i++)
                {
                    <button class="card card-revers card-hidden">card</button>
                }
            </div>
        </section>

        @if (_game.CenterCard is not null)
        {
            <button class="card card-revers" id="center-card">Center Card</button>
        }

        <section class="cards">
            <section class="cards">
                <div class="col battling-deck">
                    <button class="card card-avers card-hidden">card</button>
                    @for (int i = 0; i < _game.Player.BattlingDeck.Cards.Length; i++)
                    {
                        @*_game.Player.BattlingDeck.Cards[i];*@
                        <button class="card card-avers">card</button>
                    }
                    @for (int i = 0; i < 6 - _game.Player.BattlingDeck.Cards.Length; i++)
                    {
                        <button class="card card-revers card-hidden">card</button>
                    }
                </div>
                <div class="col hand-deck">
                    <button class="card card-revers hero-card">Hero@*_game.Player.HeroCard*@</button>
                    @for (int i = 0; i < _game.Player.HandDeck.Cards.Length; i++)
                    {
                        @*_game.Player.HandDeck.Cards[i];*@
                        <button class="card card-revers">card</button>
                    }
                    @for (int i = 0; i < 6 - _game.Player.HandDeck.Cards.Length; i++)
                    {
                        <button class="card card-revers card-hidden">card</button>
                    }
                </div>
            </section>
        </section>
    </div>

    <aside>
        <button class="card card-hidden">card</button>
        <button class="card card-common-deck">Common Deck</button>
        <button class="card card-player-deck">Own Deck</button>
    </aside>

    <div class="action-bar">
        <button class="action-button">Take Cards</button>
    </div>
</div>

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    private GetUserQueryResponse _user;
    private GetGameStateQueryResponse _game;

    protected override async Task OnInitializedAsync()
    {
        var result = await CommandExecutor.Execute(new StartBotGameCommand(await Auth.GetUserId()));
        await RefreshView();
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        _user = await QueryExecutor.Execute<GetUserQuery, GetUserQueryResponse>(
            new GetUserQuery(await Auth.GetUserId()));
        
        _game = await QueryExecutor.Execute<GetGameStateQuery, GetGameStateQueryResponse>(
                new GetGameStateQuery(_user.LastGameId, _user.Id));
    }
}
