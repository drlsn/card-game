@page "/game"
@using Microsoft.AspNetCore.Components.Authorization;
@using Trinica.UseCases.Gameplay;
@using Trinica.UseCases.Users;

@*<FullBg ImageUrl=@($@"{Config.BaseAssetsPath}/images/general/main-bg.png") />*@

@if (_game is null)
{
    <p>No Game</p>
    return;
}

<Board @ref=_board Game=@_game OnActionButtonClick=@OnActionButtonClick />

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    private GetUserQueryResponse _user;
    private GetGameStateQueryResponse _game;

    private Board _board;

    protected override async Task OnInitializedAsync()
    {
        var result = await CommandExecutor.Execute(new StartBotGameCommand(await Auth.GetUserId()));
        await RefreshView();
    }

    private async Task OnActionButtonClick(Board.ActionType actionType)
    {
        await _board.GreyOutNonDeckCards();
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        _user = await QueryExecutor.Execute<GetUserQuery, GetUserQueryResponse>(
            new GetUserQuery(await Auth.GetUserId()));
        
        _game = await QueryExecutor.Execute<GetGameStateQuery, GetGameStateQueryResponse>(
                new GetGameStateQuery(_user.LastGameId, _user.Id));
    }
}
