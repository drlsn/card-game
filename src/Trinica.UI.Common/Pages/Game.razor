@page "/game"
@using Microsoft.AspNetCore.Components.Authorization;
@using Trinica.UseCases.Gameplay;
@using Trinica.UseCases.Users;

@*<FullBg ImageUrl=@($@"{Config.BaseAssetsPath}/images/general/main-bg.png") />*@

@if (_game is null)
{
    <p>No Game</p>
    return;
}

<Board 
    @ref=_board 
    Game=@_game 
    OnActionButtonClick=@OnActionButtonClick
    OnCardClick=@OnCardClick />

@code {
    [Inject] public IQueryExecutor QueryExecutor { get; set; }
    [Inject] public ICommandExecutor CommandExecutor { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public AuthenticationStateProvider Auth { get; set; }

    private GetUserQueryResponse _user;
    private GetGameStateQueryResponse _game;

    private Board _board;

    protected override async Task OnInitializedAsync()
    {
        var result = await CommandExecutor.Execute(new StartBotGameCommand(await Auth.GetUserId()));
        await RefreshView();

        RunJob(_cancellationTokenSource.Token);
    }

    private CancellationTokenSource _cancellationTokenSource = new();
    private async Task RunJob(CancellationToken ct)
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        while (await timer.WaitForNextTickAsync(ct) && 
            !ct.IsCancellationRequested)
        {
            if (!await ShouldRefresh())
                continue;

            await RefreshView();
            Console.WriteLine("View Refreshed");
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
    }

    private async Task OnActionButtonClick(string actionName)
    {
        if (actionName == nameof(Entities.Gameplay.Game.PassLayCardToBattle))
        {
            var result = await CommandExecutor.Execute(
               new PassLayCardToBattleCommand(_game.Id, _game.Player.PlayerId));
        }
    }

    private async Task OnCardClick(string cardId, string playerId, Card.CardDeckType deckType)
    {
        if (_game.State.ExpectedActionTypes.Contains(nameof(Entities.Gameplay.Game.TakeCardToHand)))
        {
            var result = await CommandExecutor.Execute(
                new TakeCardToHandCommand(_game.Id, _game.Player.PlayerId, deckType.ToCardSourceStr()));
        }
        else
        if (_game.State.ExpectedActionTypes.Contains(nameof(Entities.Gameplay.Game.LayCardsToBattle)))
        {
            if (deckType != Card.CardDeckType.HandDeck && playerId != _game.Player.PlayerId)
                return;

            var result = await CommandExecutor.Execute(
                new LayCardToBattleCommand(_game.Id, _game.Player.PlayerId, cardId));
        }

        await RefreshView();
    }

    protected async Task<bool> RefreshView()
    {
        await RefreshViewModel();
        await InvokeAsync(StateHasChanged);

        return true;
    }

    protected async Task RefreshViewModel()
    {
        _user = await QueryExecutor.Execute<GetUserQuery, GetUserQueryResponse>(
            new GetUserQuery(await Auth.GetUserId()));

        _game = await QueryExecutor.Execute<GetGameStateQuery, GetGameStateQueryResponse>(
                new GetGameStateQuery(_user.LastGameId, _user.Id));
    }

    private async Task<bool> ShouldRefresh()
    {
        var response = await QueryExecutor.Execute<GetGameUpdateCheckQuery, GetGameUpdateCheckQueryResponse>(
            new GetGameUpdateCheckQuery(_game.Id, _game.Version));

        return response.hasToUpdate;
    }
}
